import pandas as pd 
import matplotlib.pyplot as plt
from frechetdist import frdist

dataset_parent_path = "datasets/"

datasets = ["hello_vertical_data","bye_vertical_data","hello_horizontal_data","bye_horizontal_data","hello_data","bye_data"]



def similarityIndex(prediction_list):
    print("[INFO]:Length of input is: {}".format(len(prediction_list)))
    datasets = ["datasets/hello_vertical_data.csv" , "datasets/bye_vertical_data.csv",  "datasets/good_vertical_data.csv",  "datasets/day_vertical_data.csv" ]
    master_list = []
    row_counts = {}
    for eachdataset in datasets:
        count = 0
        df = pd.read_csv(eachdataset, index_col=[0])
        df_list = df.values.tolist()
        for eachrow in df_list:
            temp = eachrow
            temp.insert(0,eachdataset.split('/')[1].split('_')[0])
            master_list.append(temp)
            count+=1
        row_counts[eachdataset.split('/')[1].split('_')[0]] = count
    
    #now we have the master list ready
    #now we need to check the similarityif the prediction list

    #now lets calculate the frechet distance of each of the test rows with each of the train rows
    processed_predlist = []
    for k in range(0,len(prediction_list)):
        processed_predlist.append([k,prediction_list[k]])
    
    processed_masterlist = []
    for each in master_list:
        temp = []
        for k in range(0,len(prediction_list)):
            temp.append([k,each[k+1]])
        temp.insert(0,each[0])
        processed_masterlist.append(temp)

    avg_distances = []
    # print(len(master_list[0]))
    # print(len(prediction_list))
    for each_test in processed_masterlist:
        verdict = each_test[0]
        each_test.remove(verdict)
        distances = []

        distances.append(frdist(each_test,processed_predlist))
        avg_distances.append((verdict,sum(distances)/len(distances)))
    
    print("\nFinal results are: ")
    key = {}
    for each in avg_distances:
        if(each[0] in key):
            key[each[0]] += each[1]
        else:
            key[each[0]] = each[1]
    
    print(key)
    # print(row_counts)
    results = []
    # for each in key.keys():
    #     results.append([each,key[each]/row_counts[each]])
    #     print("AVG DISTANCE {} = {}".format(each,key[each]/row_counts[each]))

    
    results = sorted(key,key = lambda x: x[0])
    return results[0]



# test = [0.020777048221211104, 0.014691591690258264, 0.020777048221211104, 0.020777048221211104, 0.03285139771708852, 0.03285139771708852, 0.014691591690258264, 0.03285139771708852, 0.029383183380516528, 0.22232412465600274, 0.6030714964849961, 0.706572395418632, 0.6772489136836541, 0.7359006398833362, 0.7058082853265872, 0.837549590041159, 0.4556762419419314, 0.25018879122384174, 0.2938318338051653, 0.22037387535387398, 0.2497570587343905, 0.19155491976677386, 0.19155491976677386, 0.17691019085124388, 0.11753273352206611, 0.16425698858544258, 0.04407477507077479, 0.014691591690258264, 0.020777048221211104, 0.029383183380516528, 0.04155409644242221, 0.04155409644242221, 0.23552413180621065, 0.8541363406443014, 1.0, 0.9412943038945661, 0.8239088631680209, 0.9706462341175618, 0.8966686552539431, 0.9412943038945661, 0.9266190816686277, 0.8679237315066902, 0.5014548228386626, 0.36758350665146056, 0.13303802104754786, 0.07491271271436449, 0.07491271271436449, 0.020777048221211104, 0.06570279543417704, 0.04155409644242221, 0.03285139771708852, 0.020777048221211104, 0.07345795845129133, 0.014691591690258264, 0.03285139771708852, 0.03285139771708852, 0.03285139771708852, 0.014691591690258264, 0.020777048221211104, 0.12114996869476305, 0.22232412465600274, 0.32354874470585393, 0.30991946622470046, 0.29529733832677757, 0.3529041426632936, 0.35382038170248775, 0.32454786827202187, 0.3529041426632936, 0.3379066088759401, 0.338225840509608, 0.338225840509608, 0.08936546344394365, 0.338225840509608, 0.16227393413601093, 0.03285139771708852, 0.020777048221211104, 0.014691591690258264, 0.03285139771708852, 0.014691591690258264, 0.020777048221211104, 0.020777048221211104, 0.014691591690258264, 0.03285139771708852, 0.03285139771708852, 0.058766366761033056, 0.3379066088759401, 0.3529041426632936, 0.08814955014154958, 0.0, 0.11844739893962328, 0.10388524110605551, 0.19155491976677386, 0.2971190541766813, 0.020777048221211104, 0.08814955014154958, 0.26485643578703416, 0.23689479787924655, 0.28259840863937696, 0.30852342549542355, 0.07345795845129133, 0.029383183380516528, 0.014691591690258264, 0.0, 0.014691591690258264, 0.03285139771708852, 0.03285139771708852, 0.0, 0.014691591690258264, 0.020777048221211104, 0.020777048221211104, 0.014691591690258264, 0.3088730272228759, 0.5297128715740683, 0.5443824533891167, 0.6030714964849961, 0.6759728901032522, 0.632421403359122, 0.6759728901032522, 0.6612848458211911, 0.6617742635611755, 0.6759728901032522, 0.6759728901032522, 0.7200378914172672, 0.5291013113875882, 0.060574984347381525, 0.060574984347381525, 0.03285139771708852, 0.014691591690258264, 0.014691591690258264, 0.014691591690258264, 0.029383183380516528, 0.046458892194419114, 0.014691591690258264, 0.020777048221211104, 0.03285139771708852, 0.0, 0.03285139771708852, 0.03285139771708852]
# print(similarityIndex(test[:30]))